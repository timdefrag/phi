{"ts":1363622016626,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1363622023631,"patch":[[{"diffs":[[1,"var Phi = {};\n\nPhi.ParseShape = function(data, matchFn, procFn) {\n  \n};\n\nPhi.PSInstance = function(shape, data) {\n  \n};\n\nPhi.ParseRule = function(preShape, token, postShape, procFn) {\n  \n};\n\nPhi.ParseContext = function(parent, rules) {\n  this.parent = parent;\n};\n\nPhi.Tokens = {\n  LParen: '(',\n  RParen: ')',\n  LBrace: '{',\n  RBrace: '}',\n  LAngle: '<',\n  RAngle: '>',\n  LBracket: '[',\n  RBracket: ']'\n};\n\nPhi.Shapes = {};\n\nPhi.Shapes.Region = new Phi.ParseShape(\n  function() {\n    \n  },\n  function() {\n    \n  });\n  \nPhi.Shapes.Expression = new Phi.ParseShape(\n  function() {\n    \n  },\n  function() {\n    \n  });\n  \nPhi.Shapes.Items = new Phi.ParseShape(\n  function() {\n    \n  },\n  function() {\n    \n  });\n  \nPhi.Shapes.Tuple = new Phi.ParseShape(\n  { items: Phi.Shapes.Items },\n  function() {\n    \n  },\n  function() {\n    \n  });\n\n\nPhi.tokenize = function(text) {\n  \n};\n\nPhi.parse = function(tokens) {\n  \n};\n\nPhi.compile = function(text) {\n  var tokens = Phi.tokenize(text);\n  var ast = Phi.parse(tokens);\n  \n  return ast;\n};\n\n\nvar result = Phi.compile('<5, 10, 15>');\n\n\n"]],"start1":0,"start2":0,"length1":0,"length2":1071}]],"length":1071,"saved":false}
