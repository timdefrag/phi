
start
  = items:ListItems { return { T: 'Shell', body: items }; }


//
//  CORE
//

__ = [\t\v\f \u00A0\uFEFF\n\r\u2028\u2029]*

Alpha = [a-zA-Z]
Alphas = as:Alpha+ { return as.join(''); }
  
Digit = [0-9]
Digits = ds:Digit+ { return ds.join(''); }
  
HexDigit = [0-9a-fA-F]
HexDigits = hs:HexDigit+ { return hs.join(''); }

Glyph
  = g:[\+\-\*\/\=\;\<\>\@\&\~\%\.\:\^\!\?]+ {
    return { T: 'Glyph', val: g.join('') };
  }



//
//  STRINGS
//

Str
  = "'" cs:[^']* "'" { return { T: 'Atom', val: cs.join('') }; }



//
//  NUMBERS
//

SignInt = s:[-+]? i:Digits { return s + i; }

ExpPart = e:[eE] i:SignInt { return e + i; }

BaseNum
  = "0" [xX] i:HexDigits { return parseInt('0x' + i); }
  / "." i:Digits exp:ExpPart? { return parseFloat('0.' + i + exp); }
  / li:Digits "." ri:Digits? exp:ExpPart? { return parseFloat(li + '.' + (ri || '0') + exp); }
  / i:Digits exp:ExpPart? { return parseFloat(i + exp); }

SignNum = s:[-+]? n:BaseNum { return s=='-' ? -n : n; }

Num = s:[-+]? n:BaseNum { return { T: 'Num', val: (s==='-' ? -n : n) }; }



//
//  WORDS
//

WordHead = c:[a-zA-Z_$] { return c; }

WordTail = cs:[a-zA-Z0-9_$]+ { return cs.join(''); }

Word = h:WordHead t:WordTail? { return { T: 'Word', val: h + t }; }



//
//  LISTS
//

ListItems
  = items:( Expr __ (",")? )* {
    return items.map(function(item) { return item[0]; });
  }
  
List
  = __ "[" items:ListItems __ "]" { return { T: 'List', items: items }; }



//
//  HASHES
//

Pair
  = key:Expr __ ":" val:Expr { return { T: 'Pair', key: key, val: val }; }

HashItems
  = pairs:( Pair __ (",")? )* {
    return pairs.map(function(pair) { return pair[0]; });
  }

Hash
  = __ "{" pairs:HashItems __ "}" { return { T: 'Hash', pairs: pairs }; }



//
//  ATOMS
//

Null
  = "null" { return { T: 'Atom', val: null }; }
  
Bool
  = val:( "true" / "false" ) {
    return { T: 'Atom', val: (val === 'true') };
  }
  
Fn
  = "Fn"



//
//  EXPRESSIONS
//

Scope
  = __ items:ListItems { return (
    items.length == 0 ? { T: 'Atom', val: null } :
    items.length == 1 ? items[0] :
    { T: 'List', val: items }
  ); }

Spell
  = "#[" __ name:Word (__ ",")? args:ListItems "]" {
    return { T: 'Spell', id:name.val, args: args };
  }

Val
  = Null / Bool / Num / Str / List / Hash / Fn
  
Prime
  = Spell / Glyph / Word / Val / ( "(" s:Scope __ ")" ) { return s; }
  
Expr
  = __ p:Prime { return p; }







